// <auto-generated />
using System;
using ITCompany;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITCompany.Migrations
{
    [DbContext(typeof(ITCompanyDbContext))]
    [Migration("20220126211219_AddClientTable")]
    partial class AddClientTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITCompany.Entities.ClientEntity", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CooperationStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientId = -1,
                            CooperationStartDate = new DateTimeOffset(new DateTime(2022, 1, 26, 21, 12, 19, 230, DateTimeKind.Unspecified).AddTicks(3358), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Email 1",
                            Name = "Client 1",
                            PhoneNumber = "PhoneNumber 1"
                        },
                        new
                        {
                            ClientId = -2,
                            CooperationStartDate = new DateTimeOffset(new DateTime(2022, 1, 26, 21, 12, 19, 230, DateTimeKind.Unspecified).AddTicks(3783), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Email 2",
                            Name = "Client 2",
                            PhoneNumber = "PhoneNumber 2"
                        },
                        new
                        {
                            ClientId = -3,
                            CooperationStartDate = new DateTimeOffset(new DateTime(2022, 1, 26, 21, 12, 19, 230, DateTimeKind.Unspecified).AddTicks(3789), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Email 3",
                            Name = "Client 3",
                            PhoneNumber = "PhoneNumber 3"
                        },
                        new
                        {
                            ClientId = -4,
                            CooperationStartDate = new DateTimeOffset(new DateTime(2022, 1, 26, 21, 12, 19, 230, DateTimeKind.Unspecified).AddTicks(3791), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Email 4",
                            Name = "Client 4",
                            PhoneNumber = "PhoneNumber 4"
                        },
                        new
                        {
                            ClientId = -5,
                            CooperationStartDate = new DateTimeOffset(new DateTime(2022, 1, 26, 21, 12, 19, 230, DateTimeKind.Unspecified).AddTicks(3793), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Email 5",
                            Name = "Client 5",
                            PhoneNumber = "PhoneNumber 5"
                        });
                });

            modelBuilder.Entity("ITCompany.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HiredDate")
                        .HasMaxLength(7)
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TitleId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ITCompany.Entities.EmployeeProjectEntity", b =>
                {
                    b.Property<int>("EmployeeProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.Property<DateTime>("StartedDate")
                        .HasMaxLength(7)
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeProjectId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("ITCompany.Entities.OfficeEntity", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OfficeId");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("ITCompany.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartedDate")
                        .HasMaxLength(7)
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientID");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = -1,
                            Budget = 1000000m,
                            ClientID = -1,
                            Name = "Test project 1",
                            StartedDate = new DateTime(2022, 1, 26, 21, 12, 19, 220, DateTimeKind.Utc).AddTicks(1408)
                        },
                        new
                        {
                            ProjectId = -2,
                            Budget = 1000000m,
                            ClientID = -2,
                            Name = "Test project 2",
                            StartedDate = new DateTime(2022, 1, 26, 21, 12, 19, 220, DateTimeKind.Utc).AddTicks(2518)
                        },
                        new
                        {
                            ProjectId = -3,
                            Budget = 1000000m,
                            ClientID = -3,
                            Name = "Test project 3",
                            StartedDate = new DateTime(2022, 1, 26, 21, 12, 19, 220, DateTimeKind.Utc).AddTicks(2524)
                        },
                        new
                        {
                            ProjectId = -4,
                            Budget = 1000000m,
                            ClientID = -4,
                            Name = "Test project 4",
                            StartedDate = new DateTime(2022, 1, 26, 21, 12, 19, 220, DateTimeKind.Utc).AddTicks(2526)
                        },
                        new
                        {
                            ProjectId = -5,
                            Budget = 1000000m,
                            ClientID = -5,
                            Name = "Test project 5",
                            StartedDate = new DateTime(2022, 1, 26, 21, 12, 19, 220, DateTimeKind.Utc).AddTicks(2528)
                        });
                });

            modelBuilder.Entity("ITCompany.Entities.TitleEntity", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TitleId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("ITCompany.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("ITCompany.Entities.OfficeEntity", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ITCompany.Entities.TitleEntity", "Title")
                        .WithMany("Employees")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Office");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("ITCompany.Entities.EmployeeProjectEntity", b =>
                {
                    b.HasOne("ITCompany.Entities.EmployeeEntity", "Employee")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ITCompany.Entities.ProjectEntity", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ITCompany.Entities.ProjectEntity", b =>
                {
                    b.HasOne("ITCompany.Entities.ClientEntity", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ITCompany.Entities.ClientEntity", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ITCompany.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("ITCompany.Entities.OfficeEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ITCompany.Entities.ProjectEntity", b =>
                {
                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("ITCompany.Entities.TitleEntity", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
